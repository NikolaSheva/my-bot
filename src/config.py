from pydantic_settings import BaseSettings, SettingsConfigDict
from typing import List, Tuple

class Settings(BaseSettings):
    # Telegram
    channel_id: str  # –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
    my_channel_id: str  # –õ–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª (–≤—Å–µ–≥–¥–∞ numeric ID)
    bot_token: str
    admin_id: int
    api_id: int
    api_hash: str
    
    # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
    max_photos: int = 10
    max_text_length: int = 4000
    custom_photos: List[str] = []

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    rate_limit_per_minute: int = 10
    
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        extra='ignore'
    )
    
    @property
    def all_channels(self) -> List[Tuple[str, str]]:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        channels = []
        if self.channel_id and self.channel_id.strip():
            channels.append(("Perspectiva", self.channel_id))
        if self.my_channel_id and self.my_channel_id.strip():
            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–Ø–ú–û ID, –ë–ï–ó –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø!
            channels.append(("LuxuryWatches", self.my_channel_id))
        return channels
    
    def validate_channels(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self.all_channels:
            raise ValueError("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        if not self.bot_token:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return True

settings = Settings()

try:
    settings.validate_channels()
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {[name for name, _ in settings.all_channels]}")
except ValueError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: {e}")

if __name__ == "__main__":
    print("\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:")
    print(f"Channel ID: '{settings.channel_id}'")
    print(f"My Channel ID: '{settings.my_channel_id}'")
    print(f"–í—Å–µ –∫–∞–Ω–∞–ª—ã: {settings.all_channels}")





# from pydantic_settings import BaseSettings, SettingsConfigDict


# class Settings(BaseSettings):
    

#     # Pydantic v2 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ UPPER_CASE
#     channel_id: str
#     bot_token: str
#     admin_id: int
#     api_id: int
#     api_hash: str

#     model_config = SettingsConfigDict(
#         env_file=".env",
#         env_file_encoding="utf-8",
#         extra='ignore'
#     )


# settings = Settings()
