# main.py 
import time
from telebot import types
import requests
from bs4 import BeautifulSoup
from config import bot, CHANNEL_ID
import logging

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
message_history = {}
# VIDEO_PATH = "/app/media/rolex.mp4"


# ------------------- –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ -------------------
def parse_lombard_page(url):
    """Find html and photos"""
    html, photos = "", []
    try:
        logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {url}")
        headers = {"User-Agent": "Mozilla/5.0"}
        r = requests.get(url, headers=headers, timeout=30)
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "lxml")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        title_tag = soup.find("a", class_="catalog-item--brand-title")
        title = title_tag.get_text(strip=True) if title_tag else "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        subtitle_tag = soup.select_one("div.catalog-item--model")
        subtitle = subtitle_tag.get_text(strip=True) if subtitle_tag else ""

        ref_tag = soup.find("div", class_="text-gray")
        reference = ref_tag.get_text(strip=True) if ref_tag else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        price_tag = soup.find("p", class_="item-price--text")
        # price = price_tag.get_text(strip=True) if price_tag else "–ù–µ—Ç —Ü–µ–Ω—ã"
        if price_tag:
            price_text = price_tag.get_text(strip=True)
            price = price_text if price_text else "–ü–æ –∑–∞–ø—Ä–æ—Å—É"
        else:
            price = "–ü–æ –∑–∞–ø—Ä–æ—Å—É"

        condition_tag = soup.find("div", class_="flex-shrink-0")
        condition = (
            condition_tag.get_text(strip=True)
            if condition_tag
            else "–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        )

        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        characteristics = {
            "–¢–∏–ø": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "–ú–∞—Ç–µ—Ä–∏–∞–ª –∫–æ—Ä–ø—É—Å–∞": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "–í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "–î–∏–∞–º–µ—Ç—Ä –∫–æ—Ä–ø—É—Å–∞": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "–¶–≤–µ—Ç —Ü–∏—Ñ–µ—Ä–±–ª–∞—Ç–∞": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "–ë–µ–∑–µ–ª—å": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "–ú–µ—Ö–∞–Ω–∏–∑–º": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "–§—É–Ω–∫—Ü–∏–∏": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "–ó–∞–ø–∞—Å —Ö–æ–¥–∞": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "–ö–∞–ª–∏–±—Ä": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "–ú–∞—Ç–µ—Ä–∏–∞–ª —Ä–µ–º–µ—à–∫–∞": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "–°–æ—Å—Ç–æ—è–Ω–∏–µ": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "–°—Ç–µ–∫–ª–æ": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        }

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        for row in soup.select(
            "div.d-block.d-sm-flex.flex-nowrap.justify-space-between.align-baseline.my-2"
        ):
            label = row.find("div", class_="option-label")
            value = row.find("div", class_="option-value")
            if label and value:
                label_text = label.get_text(strip=True).lower()
                value_text = value.get_text(strip=True)
                for key in characteristics:
                    if key.lower() in label_text:
                        characteristics[key] = value_text

        # –§–æ—Ç–æ, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏
        # custom_photos = [
        #     "/app/pics/..jpg",
        # ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä—É—á–Ω—ã–µ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        # for path in custom_photos:
        #     if os.path.exists(path):
        #         photos.append(open(path, "rb"))

        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ HTML
        img_tags = soup.select("div.catalog-item--photos__grid img")
        for img in img_tags:
            src_attr = img.get("src")
            if src_attr:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É
                src_str = str(src_attr).split("?")[0]
                if src_str and src_str.strip() and "noimage" not in src_str.lower():
                    photos.append(src_str)
                    logger.debug(f"üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ –∏–∑ HTML: {src_str}")
            else:
                logger.debug("‚ÑπÔ∏è –£ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç src –∞—Ç—Ä–∏–±—É—Ç–∞")

        # ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        unique_photos = []
        seen_urls = set()

        for photo in photos:
            if isinstance(photo, str):  # URL
                if photo not in seen_urls:
                    seen_urls.add(photo)
                    unique_photos.append(photo)
            else:  # file-object
                # –§–∞–π–ª–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏
                unique_photos.append(photo)

        photos = unique_photos[:10]

        # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –±–µ–∑ custom_photos
        # photos = list(dict.fromkeys(photos))[:3]

        # –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        html = f"""<a href="{url}"><b>{title}</b>  <b>{subtitle}</b></a>
<b>{reference}</b>

‚ú® <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {condition}
<b>–ú–∞—Ç–µ—Ä–∏–∞–ª –∫–æ—Ä–ø—É—Å–∞:</b> {characteristics['–ú–∞—Ç–µ—Ä–∏–∞–ª –∫–æ—Ä–ø—É—Å–∞']}
<b>–§—É–Ω–∫—Ü–∏–∏:</b> {characteristics['–§—É–Ω–∫—Ü–∏–∏']}
<b>–ú–∞—Ç–µ—Ä–∏–∞–ª —Ä–µ–º–µ—à–∫–∞:</b> {characteristics['–ú–∞—Ç–µ—Ä–∏–∞–ª —Ä–µ–º–µ—à–∫–∞']}

<b>–¶–µ–Ω–∞:</b> {price}
<b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b> @Genesislab
–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥
+7(982)663-99-99
"""
        

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {url}: {e}")
        raise
    return html.strip(), photos


def create_photo_markup(photos, selected_photos):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"""
    markup = types.InlineKeyboardMarkup()

    for i, photo_url in enumerate(selected_photos):
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ñ–æ—Ç–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
        original_index = photos.index(photo_url)

        row_buttons = []
        if i > 0:
            row_buttons.append(
                types.InlineKeyboardButton(
                    "‚¨ÜÔ∏è", callback_data=f"move_up_{original_index}"
                )
            )

        row_buttons.append(
            types.InlineKeyboardButton(
                f"‚ùå {i+1}", callback_data=f"remove_{original_index}"
            )
        )

        if i < len(selected_photos) - 1:
            row_buttons.append(
                types.InlineKeyboardButton(
                    "‚¨áÔ∏è", callback_data=f"move_down_{original_index}"
                )
            )

        markup.row(*row_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    markup.row(
        types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ", callback_data="bulk_remove")
    )
    markup.row(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_photos")
    )
    return markup


def send_preview(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    data = user_data[chat_id]
    if data["selected_photos"]:
        media = []
        for i, photo in enumerate(data["selected_photos"]):
            if i == 0:
                media.append(
                    types.InputMediaPhoto(
                        photo, caption=data["text"], parse_mode="HTML"
                    )
                )
            else:
                media.append(types.InputMediaPhoto(photo))
        bot.send_media_group(chat_id, media)
    else:
        bot.send_message(chat_id, data["text"], parse_mode="HTML")


# ------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ -------------------


@bot.message_handler(commands=["start"])
def start(message):
    logger.info(f"Received message from {message.chat.id}")
    try:

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
        message_history[message.chat.id] = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        message_history[message.chat.id].append(message.message_id)

        msg = bot.send_message(
            message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Å—ã —Å lombard-perspectiva.ru"
        )
        message_history[message.chat.id].append(msg.message_id)
        # –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")


@bot.message_handler(func=lambda m: m.text.startswith("http"))
def handle_link(message):
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    if message.chat.id not in message_history:
        message_history[message.chat.id] = []
    message_history[message.chat.id].append(message.message_id)
    url = message.text.strip()
    try:
        text, photos = parse_lombard_page(url)

        user_data[message.chat.id] = {
            "text": text,
            "photos": photos,
            "url": url,
            "selected_photos": photos.copy(),  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ —Ñ–æ—Ç–æ –≤—ã–±—Ä–∞–Ω—ã
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text"
            )
        )
        markup.add(
            types.InlineKeyboardButton(
                "üñºÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ", callback_data="select_photos"
            )
        )
        markup.add(
            types.InlineKeyboardButton(
                "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="send_to_channel"
            )
        )

        send_preview(message.chat.id)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


@bot.callback_query_handler(func=lambda call: call.data == "select_photos")
def select_photos_callback(call):
    try:
        logger.info(f"Callback select_photos –æ—Ç {call.message.chat.id}")
        chat_id = call.message.chat.id
        if chat_id in user_data:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±–æ—Ä–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            if "photos_to_remove" in user_data[chat_id]:
                del user_data[chat_id]["photos_to_remove"]

            markup = create_photo_markup(
                user_data[chat_id]["photos"], user_data[chat_id]["selected_photos"]
            )
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏:",
                reply_markup=markup,
            )
            bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_photos_callback: {e}")


@bot.callback_query_handler(
    func=lambda call: call.data.startswith(
        ("move_up_", "move_down_", "remove_", "confirm_remove_", "cancel_remove_")
    )
)
def handle_photo_actions(call):
    chat_id = call.message.chat.id
    if chat_id not in user_data:
        bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        return

    try:
        data = user_data[chat_id]
        photos = data["photos"]
        selected_photos = data["selected_photos"]

        cd = call.data
        try:
            photo_index = int(cd.split("_")[-1])
        except ValueError:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω–¥–µ–∫—Å–∞")
            return

        if photo_index < 0 or photo_index >= len(photos):
            bot.answer_callback_query(call.id, "–ò–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
            return

        photo_url = photos[photo_index]

        # –≠—Ç–∞–ø 1: –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        if cd.startswith("remove_"):
            if photo_url in selected_photos:
                confirm_markup = types.InlineKeyboardMarkup()
                confirm_markup.add(
                    types.InlineKeyboardButton(
                        "‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_remove_{photo_index}"
                    ),
                    types.InlineKeyboardButton(
                        "‚Ü©Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å", callback_data=f"cancel_remove_{photo_index}"
                    ),
                )
                bot.send_photo(
                    chat_id,
                    photo_url,
                    caption=f"üóëÔ∏è –§–æ—Ç–æ ‚Ññ{selected_photos.index(photo_url)+1} ‚Äî —É–¥–∞–ª–∏—Ç—å?",
                    reply_markup=confirm_markup,
                )
            bot.answer_callback_query(call.id)

        # –≠—Ç–∞–ø 2: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        elif cd.startswith("confirm_remove_"):
            if photo_url in selected_photos:
                selected_photos.remove(photo_url)
            bot.answer_callback_query(call.id, "–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
            new_markup = create_photo_markup(photos, selected_photos)
            bot.send_message(
                chat_id, "üì∏ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ:", reply_markup=new_markup
            )

        elif cd.startswith("cancel_remove_"):
            bot.answer_callback_query(call.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
            new_markup = create_photo_markup(photos, selected_photos)
            bot.send_message(
                chat_id, "üì∏ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ:", reply_markup=new_markup
            )

        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
        elif cd.startswith("move_up_"):
            if photo_url in selected_photos:
                pos = selected_photos.index(photo_url)
                if pos > 0:
                    selected_photos[pos - 1], selected_photos[pos] = (
                        selected_photos[pos],
                        selected_photos[pos - 1],
                    )

        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–Ω–∏–∑
        elif cd.startswith("move_down_"):
            if photo_url in selected_photos:
                pos = selected_photos.index(photo_url)
                if pos < len(selected_photos) - 1:
                    selected_photos[pos + 1], selected_photos[pos] = (
                        selected_photos[pos],
                        selected_photos[pos + 1],
                    )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not cd.startswith(("remove_", "cancel_remove_")):
            new_markup = create_photo_markup(photos, selected_photos)
            bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=call.message.message_id,
                reply_markup=new_markup,
            )

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")


@bot.callback_query_handler(func=lambda call: call.data == "confirm_photos")
def confirm_photos_callback(call):
    chat_id = call.message.chat.id
    if chat_id in user_data:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text"
            )
        )
        markup.add(
            types.InlineKeyboardButton(
                "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="send_to_channel"
            )
        )

        send_preview(chat_id)
        bot.send_message(
            chat_id, "–í—ã–±–æ—Ä —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup
        )
        bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data == "edit_text")
def edit_text_callback(call):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞:")
    bot.register_next_step_handler(call.message, process_text_edit)
    bot.answer_callback_query(call.id)


def process_text_edit(message):
    chat_id = message.chat.id
    if chat_id in user_data:
        user_data[chat_id]["text"] = message.text

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="send_to_channel"
            )
        )
        markup.add(
            types.InlineKeyboardButton(
                "üñºÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ", callback_data="select_photos"
            )
        )

        send_preview(chat_id)
        bot.send_message(
            chat_id, "–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup
        )


@bot.callback_query_handler(func=lambda call: call.data == "send_to_channel")
def send_to_channel_callback(call):
    chat_id = call.message.chat.id
    if chat_id in user_data:
        data = user_data[chat_id]
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ CHANNEL_ID –Ω–µ None –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ
            if CHANNEL_ID is None:
                raise ValueError("CHANNEL_ID is None. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
            channel_id: str = str(CHANNEL_ID)

            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª {channel_id}")
            logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: {len(data['selected_photos'])}")
            logger.info(
                f"üìù –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ: {type(data['selected_photos'][0]) if data['selected_photos'] else '–Ω–µ—Ç —Ñ–æ—Ç–æ'}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
            try:
                chat_info = bot.get_chat(channel_id)
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω: {chat_info.title}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {e}")

            # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –§–û–¢–û –ì–†–£–ü–ü–û–ô (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if data["selected_photos"]:
                media = []
                logger.info(
                    f"üñºÔ∏è –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –∏–∑ {len(data['selected_photos'])} —Ñ–æ—Ç–æ"
                )

                for i, photo in enumerate(data["selected_photos"]):
                    logger.info(
                        f"üì∏ –§–æ—Ç–æ {i+1}: —Ç–∏–ø = {type(photo)}, –∑–Ω–∞—á–µ–Ω–∏–µ = {str(photo)[:100]}..."
                    )

                    if isinstance(photo, str):  # URL
                        if i == 0:
                            media.append(
                                types.InputMediaPhoto(
                                    photo, caption=data["text"], parse_mode="HTML"
                                )
                            )
                            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ {i+1} –∫–∞–∫ URL —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º")
                        else:
                            media.append(types.InputMediaPhoto(photo))
                            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ {i+1} –∫–∞–∫ URL")
                    else:  # file-object –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø
                        logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–æ—Ç–æ: {type(photo)}")
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                try:
                    logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã...")
                    sent_messages = bot.send_media_group(channel_id, media)
                    logger.info(
                        f"‚úÖ –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! {len(sent_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π"
                    )

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                    logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")

                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≥—Ä—É–ø–ø–æ–π, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É
                    try:
                        logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É...")
                        for i, photo in enumerate(data["selected_photos"]):
                            if isinstance(photo, str):  # URL
                                if i == 0:
                                    bot.send_photo(
                                        channel_id,
                                        photo,
                                        caption=data["text"],
                                        parse_mode="HTML",
                                    )
                                    logger.info(f"‚úÖ –§–æ—Ç–æ {i+1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º")
                                else:
                                    bot.send_photo(channel_id, photo)
                                    logger.info(f"‚úÖ –§–æ—Ç–æ {i+1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                            else:
                                logger.error(
                                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ {i+1}: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø"
                                )

                        logger.info("‚úÖ –í—Å–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ –æ–¥–Ω–æ–º—É")
                    except Exception as e2:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É: {e2}")
                        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç
                        bot.send_message(channel_id, data["text"], parse_mode="HTML")
                        logger.info("‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                logger.info("üìù –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                bot.send_message(channel_id, data["text"], parse_mode="HTML")
                logger.info("‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            confirmation_text = "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
            confirmation = bot.send_message(chat_id, confirmation_text)
            message_history[chat_id] = [confirmation.message_id]

            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if chat_id in user_data:
                del user_data[chat_id]

            bot.answer_callback_query(call.id)

            # –£–¥–∞–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            time.sleep(3)
            bot.delete_message(chat_id, confirmation.message_id)
            if chat_id in message_history:
                message_history[chat_id] = []

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:")
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.callback_query_handler(func=lambda call: call.data == "bulk_remove")
def bulk_remove_callback(call):
    chat_id = call.message.chat.id
    if chat_id not in user_data:
        bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        return

    data = user_data[chat_id]
    markup = types.InlineKeyboardMarkup()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
    for i, photo_url in enumerate(data["photos"]):
        is_selected = photo_url in data.get("photos_to_remove", [])
        emoji = "‚úÖ" if is_selected else "‚¨ú"
        markup.add(
            types.InlineKeyboardButton(
                f"{emoji} –§–æ—Ç–æ {i+1}", callback_data=f"toggle_remove_{i}"
            )
        )

    markup.row(
        types.InlineKeyboardButton(
            "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="confirm_bulk_remove"
        ),
        types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="select_photos"),
    )

    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=markup,
    )
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("toggle_remove_"))
def toggle_remove_callback(call):
    chat_id = call.message.chat.id
    if chat_id not in user_data:
        bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        return

    try:
        photo_index = int(call.data.split("_")[-1])
        data = user_data[chat_id]

        if "photos_to_remove" not in data:
            data["photos_to_remove"] = []

        photo_url = data["photos"][photo_index]

        if photo_url in data["photos_to_remove"]:
            data["photos_to_remove"].remove(photo_url)
        else:
            data["photos_to_remove"].append(photo_url)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        markup = types.InlineKeyboardMarkup()
        for i, photo_url in enumerate(data["photos"]):
            is_selected = photo_url in data["photos_to_remove"]
            emoji = "‚úÖ" if is_selected else "‚¨ú"
            markup.add(
                types.InlineKeyboardButton(
                    f"{emoji} –§–æ—Ç–æ {i+1}", callback_data=f"toggle_remove_{i}"
                )
            )

        markup.row(
            types.InlineKeyboardButton(
                "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="confirm_bulk_remove"
            ),
            types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="select_photos"),
        )

        bot.edit_message_reply_markup(
            chat_id=chat_id, message_id=call.message.message_id, reply_markup=markup
        )
        bot.answer_callback_query(call.id)

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")


@bot.callback_query_handler(func=lambda call: call.data == "confirm_bulk_remove")
def confirm_bulk_remove_callback(call):
    chat_id = call.message.chat.id
    if chat_id not in user_data:
        bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        return

    data = user_data[chat_id]

    if "photos_to_remove" in data and data["photos_to_remove"]:
        # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∏–∑ selected_photos
        data["selected_photos"] = [
            p for p in data["selected_photos"] if p not in data["photos_to_remove"]
        ]
        del data["photos_to_remove"]

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É –≤–∏–¥—É
        markup = create_photo_markup(data["photos"], data["selected_photos"])
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–¥–∞–ª–µ–Ω—ã. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏:",
            reply_markup=markup,
        )
    else:
        bot.answer_callback_query(call.id, "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")


if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(non_stop=True)
