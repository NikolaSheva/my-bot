import logging
import datetime
from concurrent.futures import ThreadPoolExecutor
from urllib.parse import urlparse
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from config import bot, CHANNEL_ID
from main import parse_lombard_page
from telebot.types import InputMediaPhoto, InputMedia, InlineKeyboardMarkup, InlineKeyboardButton
from pytz import utc
import json
import time
import hashlib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler —Å SQLite
jobstores = {'default': SQLAlchemyJobStore(url='sqlite:///jobs.sqlite')}
scheduler = BackgroundScheduler(jobstores=jobstores, timezone=utc)

# –Ø–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
try:
    scheduler.start()
    logger.info("‚úÖ Scheduler started successfully")
    logger.info(f"Scheduler state: {scheduler.state}")
except Exception as e:
    logger.error(f"‚ùå Failed to start scheduler: {e}")

# ThreadPoolExecutor –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –∑–∞–¥–∞—á
executor = ThreadPoolExecutor(max_workers=5)

MAX_RETRIES = 3
DELAY_BETWEEN_LINKS = 1.0

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}
confirmation_sessions = {}

# --- –í–∞–ª–∏–¥–∞—Ü–∏—è ---
def is_valid_url(url: str) -> bool:
    try:
        result = urlparse(url)
        return all([result.scheme in ['http', 'https'], result.netloc])
    except (ValueError, TypeError):
        return False

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª ---
def send_link(url, retry=MAX_RETRIES):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –≤ –∫–∞–Ω–∞–ª —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    logger.info(f"üü° –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Å—ã–ª–∫–∏: {url}")
    
    if CHANNEL_ID is None:
        logger.error(f"‚ùå {CHANNEL_ID} –Ω–µ –∑–∞–¥–∞–Ω")
        return

    try:
        text, photos = parse_lombard_page(url)
        logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω, —Ñ–æ—Ç–æ: {len(photos)}, —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if photos:
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å –ø–æ–¥–ø–∏—Å—å—é —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                media = []
                for i, photo in enumerate(photos):
                    if i == 0:
                        media.append(InputMediaPhoto(media=photo,
                                                     caption=text[:1024] if len(text) > 1024 else text,
                                                     parse_mode="HTML"))
                    else:
                        media.append(InputMediaPhoto(media=photo))
                
                bot.send_media_group(CHANNEL_ID, media)
                logger.info(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π: {len(photos)} —à—Ç. (—Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ)")

            except Exception as media_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {media_error}")
                # fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É, –ø–µ—Ä–≤—É—é —Å —Ç–µ–∫—Å—Ç–æ–º
                for i, photo in enumerate(photos):
                    try:
                        if i == 0:
                            bot.send_photo(CHANNEL_ID, photo,
                                           caption=text[:1024] if len(text) > 1024 else text,
                                           parse_mode="HTML")
                        else:
                            bot.send_photo(CHANNEL_ID, photo)
                        logger.info(f"‚úÖ –§–æ—Ç–æ {i+1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ")
                    except Exception as photo_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {i+1}: {photo_error}")
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            bot.send_message(CHANNEL_ID, text, parse_mode="HTML")
            logger.info("‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Ñ–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)")
        
        logger.info(f"‚úÖ –°—Å—ã–ª–∫–∞ {url} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {url}: {e}")
        if retry > 0:
            logger.info(f"üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {url} ({retry} –ø–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å)")
            run_time = datetime.datetime.now() + datetime.timedelta(minutes=5)
            scheduler.add_job(
                send_link_async,
                'date',
                run_date=run_time,
                args=[url, retry-1],
                id=f"{url}_retry_{retry}_{datetime.datetime.now().timestamp()}",
                replace_existing=True
            )
def send_link_async(url, retry=MAX_RETRIES):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏"""
    logger.info(f"üü° –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è: {url}")
    executor.submit(send_link, url, retry)

# --- –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
def parse_and_show_result(url, chat_id, is_preview=False):
    """–ü–∞—Ä—Å–∏—Ç —Å—Å—ã–ª–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        text, photos = parse_lombard_page(url)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        status = "üìã –ü–†–ï–í–¨–Æ –ü–ê–†–°–ò–ù–ì–ê" if is_preview else "‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ò–ù–ì–ê"
        result_text = f"{status}:\n\n{text}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if photos:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —Ç–µ–∫—Å—Ç–æ–º
                bot.send_photo(chat_id, photos[0], 
                              caption=result_text, 
                              parse_mode="HTML")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
                if len(photos) > 1:
                    for i, photo in enumerate(photos[1:], 2):
                        bot.send_photo(chat_id, photo)
                        
            except Exception as photo_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {photo_error}")
                bot.send_message(chat_id, result_text, parse_mode="HTML")
        else:
            bot.send_message(chat_id, result_text, parse_mode="HTML")
            
        return True
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Å—ã–ª–∫–∏: {e}"
        bot.send_message(chat_id, error_msg)
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è {url}: {e}")
        return False

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —Å–µ—Å—Å–∏–∏ ---
def generate_session_id(urls):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ URLs"""
    url_string = ''.join(urls)
    return hashlib.md5(url_string.encode()).hexdigest()[:8]

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
def get_confirmation_keyboard(session_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup()
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
    keyboard.add(InlineKeyboardButton(
        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫", 
        callback_data=f"confirm:{session_id}"
    ))
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    keyboard.add(InlineKeyboardButton(
        "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", 
        callback_data=f"cancel:{session_id}"
    ))
    
    return keyboard

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ ---
def schedule_links(urls, chat_id, immediate=True):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –≤ –∫–∞–Ω–∞–ª"""
    try:
        existing_jobs = scheduler.get_jobs()
        total_links = len(urls)
        
        logger.info(f"üü° –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É {total_links} —Å—Å—ã–ª–æ–∫")
        logger.info(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ jobs: {len(existing_jobs)}")
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {scheduler.state}")
        
        for i, url in enumerate(urls):
            if immediate:
                # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –≤—ã–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
                logger.info(f"‚ö° –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ä–∞–∑—É –¥–ª—è: {url}")
                send_link_async(url)
                continue

            delay_minutes = DELAY_BETWEEN_LINKS * (len(existing_jobs) + i)
            run_time = datetime.datetime.now() + datetime.timedelta(minutes=delay_minutes)
            
            job_id = f"send_{hashlib.md5(url.encode()).hexdigest()[:10]}_{datetime.datetime.now().timestamp()}"
            
            logger.info(f"‚è∞ –î–æ–±–∞–≤–ª—è–µ–º job {i+1}: {url} –Ω–∞ {run_time} (id: {job_id})")
            
            scheduler.add_job(
                send_link_async,
                'date',
                run_date=run_time,
                args=[url],
                id=job_id,
                replace_existing=True
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ jobs –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        current_jobs = scheduler.get_jobs()
        logger.info(f"‚úÖ Jobs –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {len(current_jobs)}")
        
        bot.send_message(
            chat_id,
            f"‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å!\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫: {total_links}\n"
            f"–ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑: {DELAY_BETWEEN_LINKS:.1f} –º–∏–Ω—É—Ç(—ã)\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑: {DELAY_BETWEEN_LINKS * total_links:.1f} –º–∏–Ω—É—Ç(—ã)\n\n"
            f"–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {scheduler.state}"
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–æ–∫: {e}")
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
def show_next_preview(chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–∏"""
    if chat_id not in user_sessions:
        return
    
    session = user_sessions[chat_id]
    urls = session['urls']
    current_index = session['current_index']
    
    if current_index >= len(urls):
        # –í—Å–µ —Å—Å—ã–ª–∫–∏ –ø–æ–∫–∞–∑–∞–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        show_confirmation(chat_id)
        return
    
    url = urls[current_index]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Å—ã–ª–∫–µ
    bot.send_message(
        chat_id, 
        f"üîó –°—Å—ã–ª–∫–∞ {current_index + 1} –∏–∑ {len(urls)}:\n{url}\n\n‚è≥ –ü–∞—Ä—Å–∏–º..."
    )
    
    # –ü–∞—Ä—Å–∏–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if parse_and_show_result(url, chat_id, is_preview=True):
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        session['current_index'] += 1
        user_sessions[chat_id] = session
        
        # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–∏
        time.sleep(1)
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–≤—å—é
        show_next_preview(chat_id)

def show_confirmation(chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–µ–≤—å—é"""
    if chat_id not in user_sessions:
        return
    
    session = user_sessions[chat_id]
    urls = session['urls']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º URLs
    session_id = generate_session_id(urls)
    confirmation_sessions[session_id] = {
        'chat_id': chat_id,
        'urls': urls,
        'timestamp': datetime.datetime.now()
    }
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
    cleanup_old_sessions()
    
    bot.send_message(
        chat_id,
        f"üìä –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Å—ã–ª–æ–∫: {len(urls)}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –∫–∞–Ω–∞–ª:",
        reply_markup=get_confirmation_keyboard(session_id)
    )

def cleanup_old_sessions():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    now = datetime.datetime.now()
    keys_to_remove = []
    
    for session_id, session_data in confirmation_sessions.items():
        if (now - session_data['timestamp']).total_seconds() > 3600:  # 1 —á–∞—Å
            keys_to_remove.append(session_id)
    
    for key in keys_to_remove:
        del confirmation_sessions[key]

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ ---
@bot.message_handler(commands=['addlinks'])
def add_links_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Å—ã–ª–æ–∫"""
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addlinks <URL1> <URL2> <URL3> ...")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        urls = parts[1].strip().split()
        valid_urls = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É
        for url in urls:
            if is_valid_url(url):
                valid_urls.append(url)
            else:
                bot.reply_to(message, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL: {url}")
        
        if not valid_urls:
            bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö URL")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_sessions[message.chat.id] = {
            'urls': valid_urls,
            'current_index': 0
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É
        show_next_preview(message.chat.id)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_links_command: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ ---
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    try:
        if call.data.startswith('confirm:'):
            session_id = call.data.split(':', 1)[1]
            
            if session_id in confirmation_sessions:
                session_data = confirmation_sessions[session_id]
                urls = session_data['urls']
                chat_id = session_data['chat_id']
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
                schedule_links(urls, chat_id)
                
                bot.edit_message_text(
                    "‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°—Å—ã–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.",
                    chat_id,
                    call.message.message_id
                )
                
                # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏
                if session_id in confirmation_sessions:
                    del confirmation_sessions[session_id]
                if chat_id in user_sessions:
                    del user_sessions[chat_id]
                    
            else:
                bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")
                
        elif call.data.startswith('cancel:'):
            session_id = call.data.split(':', 1)[1]
            
            if session_id in confirmation_sessions:
                session_data = confirmation_sessions[session_id]
                chat_id = session_data['chat_id']
                
                bot.edit_message_text(
                    "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                    chat_id,
                    call.message.message_id
                )
                
                # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏
                if session_id in confirmation_sessions:
                    del confirmation_sessions[session_id]
                if chat_id in user_sessions:
                    del user_sessions[chat_id]
                    
            else:
                bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback handler: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ---
@bot.message_handler(commands=['preview'])
def preview_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /preview <URL>")
            return

        url = parts[1].strip()
        if not is_valid_url(url):
            bot.reply_to(message, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL: {url}")
            return

        bot.reply_to(message, "‚è≥ –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É...")
        parse_and_show_result(url, message.chat.id, is_preview=True)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ preview: {e}")

# --- –°—Ç–∞—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ---
@bot.message_handler(commands=['addlink'])
def add_link_command(message):
    """–°—Ç–∞—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addlink <URL>")
            return

        url = parts[1].strip()
        if not is_valid_url(url):
            bot.reply_to(message, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL: {url}")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –º–∞—Å—Å–∏–≤–æ–º –∏–∑ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        user_sessions[message.chat.id] = {
            'urls': [url],
            'current_index': 0
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        show_next_preview(message.chat.id)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_link_command: {e}")

# --- –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ ---
def cleanup_sessions():
    """–û—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    user_sessions.clear()
    confirmation_sessions.clear